[
    Token {
        kind: OpenTag(
            Full,
        ),
        span: (
            1,
            1,
        ),
    },
    Token {
        kind: Trait,
        span: (
            3,
            1,
        ),
    },
    Token {
        kind: Identifier(
            "foo",
        ),
        span: (
            3,
            7,
        ),
    },
    Token {
        kind: LeftBrace,
        span: (
            3,
            11,
        ),
    },
    Token {
        kind: SingleLineComment(
            "// it's okay to have `parent` type",
        ),
        span: (
            4,
            5,
        ),
    },
    Token {
        kind: SingleLineComment(
            "// since it's not known at this time if",
        ),
        span: (
            5,
            5,
        ),
    },
    Token {
        kind: SingleLineComment(
            "// `foo` will have a parent.",
        ),
        span: (
            6,
            5,
        ),
    },
    Token {
        kind: Public,
        span: (
            7,
            5,
        ),
    },
    Token {
        kind: Function,
        span: (
            7,
            12,
        ),
    },
    Token {
        kind: Identifier(
            "bar",
        ),
        span: (
            7,
            21,
        ),
    },
    Token {
        kind: LeftParen,
        span: (
            7,
            24,
        ),
    },
    Token {
        kind: RightParen,
        span: (
            7,
            25,
        ),
    },
    Token {
        kind: Colon,
        span: (
            7,
            26,
        ),
    },
    Token {
        kind: Identifier(
            "parent",
        ),
        span: (
            7,
            28,
        ),
    },
    Token {
        kind: LeftBrace,
        span: (
            7,
            35,
        ),
    },
    Token {
        kind: Identifier(
            "exit",
        ),
        span: (
            8,
            9,
        ),
    },
    Token {
        kind: LeftParen,
        span: (
            8,
            13,
        ),
    },
    Token {
        kind: LiteralInteger(
            1,
        ),
        span: (
            8,
            14,
        ),
    },
    Token {
        kind: RightParen,
        span: (
            8,
            15,
        ),
    },
    Token {
        kind: SemiColon,
        span: (
            8,
            16,
        ),
    },
    Token {
        kind: RightBrace,
        span: (
            9,
            5,
        ),
    },
    Token {
        kind: RightBrace,
        span: (
            10,
            1,
        ),
    },
]
