[
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: Mod,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: LeftShift,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: RightShift,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: BitwiseAnd,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: BitwiseOr,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: BitwiseXor,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: NotEquals,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: Spaceship,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: LogicalAnd,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: LogicalOr,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Int {
                i: 6,
            },
            op: LogicalXor,
            rhs: Int {
                i: 2,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: Assign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: AddAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: SubAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: MulAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: PowAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: DivAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: ConcatAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: ModAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: BitwiseAndAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: BitwiseOrAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: BitwiseXorAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: LeftShiftAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: RightShiftAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
    Expression {
        expr: Infix {
            lhs: Variable {
                name: "a",
            },
            op: CoalesceAssign,
            rhs: Int {
                i: 1,
            },
        },
    },
]
